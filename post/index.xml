<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Notes...</title>
    <link>https://danward79.github.io/post/</link>
    <description>Recent content in Posts on Notes...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Aug 2015 19:21:19 +1000</lastBuildDate>
    <atom:link href="https://danward79.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Blast from the Past - Netremote Pocket PC Screen shots</title>
      <link>https://danward79.github.io/post/netremote/</link>
      <pubDate>Mon, 24 Aug 2015 19:21:19 +1000</pubDate>
      
      <guid>https://danward79.github.io/post/netremote/</guid>
      <description>

&lt;h2 id=&#34;the-past:14f38a8bf99ff13235a9c923b27550a5&#34;&gt;The Past&lt;/h2&gt;

&lt;p&gt;Below is a blast from the past, some work I did in 2002 using Netremote from &lt;a href=&#34;http://www.promixis.com&#34;&gt;Promixis&lt;/a&gt; to provide some degree of automation in my flat, the front end was supported with muscle provided by Girder, which had a lot of &lt;a href=&#34;http://www.lua.org&#34;&gt;LUA&lt;/a&gt; running behind it on my server in node zero.&lt;/p&gt;

&lt;h3 id=&#34;netremote-pocket-pc-screen-shots:14f38a8bf99ff13235a9c923b27550a5&#34;&gt;Netremote Pocket PC Screen shots&lt;/h3&gt;

&lt;p&gt;The basis of this ccf (skin) is JLee&amp;rsquo;s Opus Theme, I have just heavily modified all the pages. Really only the JRMC pages are similar.&lt;/p&gt;

&lt;p&gt;Below are a few screenshots, not all of them thou.  From NetRemote, I can do all the below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Play music in multiple zones, only using one at the moment due to recent house move.&lt;/li&gt;
&lt;li&gt;Play any DVD I own on from a central server.  At the touch of a &amp;ldquo;button&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Control my lighting.&lt;/li&gt;
&lt;li&gt;See a 5-day forecast, including current conditions and Radar.&lt;/li&gt;
&lt;li&gt;Get local wind conditions for Windsurfing thanks to PiertoPier.net&lt;/li&gt;
&lt;li&gt;Get Sea Conditions from a local Bouy, this gives me Sea Temperature, and Offshore Wave Height etc.&lt;/li&gt;
&lt;li&gt;See the days time times.&lt;/li&gt;
&lt;li&gt;Control SageTV, my PVR (Personal Video Recorder), and see it&amp;rsquo;s current status.  i.e. See what is recording and playing and available disk space.  (This is like Sky+ on steroids for those who don&amp;rsquo;t know)&lt;/li&gt;
&lt;li&gt;Control all my equipment.&lt;/li&gt;
&lt;li&gt;View local web cams, i.e. the beach!&lt;/li&gt;
&lt;li&gt;Thats all I can remember for this one&amp;hellip;.  I have two more thou that do more and other things&amp;hellip;.  More on that later.&lt;/li&gt;
&lt;/ul&gt;

&lt;table style=&#34;width: 100%; height: 100%; text-align: left; margin-left: auto; margin-right: auto;&#34; border=&#34;0&#34; cellpadding=&#34;2&#34; cellspacing=&#34;2&#34;&gt;
  &lt;tbody&gt;
  &lt;tr&gt;
    &lt;td style=&#34;text-align: center; vertical-align: middle;&#34;&gt;&lt;img style=&#34;width: 243px; height: 322px;&#34; alt=&#34;&#34; title=&#34;OPUS Skin Home Page&#34; src=&#34;https://danward79.github.io/static/ppchome.jpg&#34; align=&#34;middle&#34;&gt;&lt;br&gt;Home Page&lt;/td&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;img style=&#34;width: 243px; height: 322px;&#34; alt=&#34;&#34; title=&#34;Weather Conditions&#34; src=&#34;https://danward79.github.io/static/ppcweathercond.jpg&#34;&gt;&lt;br&gt;Current Conditions&lt;/td&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;img style=&#34;width: 243px; height: 320px;&#34; alt=&#34;&#34; title=&#34;Weather Radar&#34; src=&#34;https://danward79.github.io/static/ppcweatherradar.jpg&#34;&gt;&lt;br&gt;Current Weather Radar&lt;/td&gt;
    &lt;/tr&gt;&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;img style=&#34;width: 243px; height: 320px;&#34; alt=&#34;&#34; title=&#34;Weather Forecast&#34; src=&#34;https://danward79.github.io/static/ppcweatherforecast.jpg&#34;&gt;&lt;br&gt;Forecast&lt;/td&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;img style=&#34;width: 243px; height: 321px;&#34; alt=&#34;&#34; title=&#34;Offshore Sea Conditions and Local Tides&#34; src=&#34;https://danward79.github.io/static/ppctidalseaconditions.jpg&#34;&gt;&lt;br&gt;Tidal and Sea Conditions&lt;/td&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;img style=&#34;width: 242px; height: 321px;&#34; alt=&#34;&#34; title=&#34;DVD Juke Box - Covers Page&#34; src=&#34;https://danward79.github.io/static/ppcldjcovers.jpg&#34;&gt;&lt;br&gt;DVD Jukebox - Covers View&lt;/td&gt;
    &lt;/tr&gt;&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;img style=&#34;width: 242px; height: 322px;&#34; alt=&#34;&#34; title=&#34;DVD JukeBox - Titles Page&#34; src=&#34;https://danward79.github.io/static/ppcljdtitles.jpg&#34;&gt;&lt;br&gt;DVD Jukebox - Titles View&lt;/td&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;img style=&#34;width: 243px; height: 321px;&#34; alt=&#34;&#34; title=&#34;Dvd JukeBox - Large Cover View&#34; src=&#34;https://danward79.github.io/static/ppcldjlargecover.jpg&#34;&gt;&lt;br&gt;DVD Jukebox - Large Cover View&lt;/td&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;img style=&#34;width: 243px; height: 321px;&#34; alt=&#34;&#34; title=&#34;DVD Info&#34; src=&#34;https://danward79.github.io/static/ppcldjinfo.jpg&#34;&gt;&lt;br&gt;DVD Jukebox - DVD Info&lt;/td&gt;
    &lt;/tr&gt;&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;img style=&#34;width: 243px; height: 321px;&#34; alt=&#34;&#34; title=&#34;DVD Control&#34; src=&#34;https://danward79.github.io/static/ppcljddvdcontrol.jpg&#34;&gt;&lt;br&gt;DVD Control&lt;/td&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Github &amp; Hugo workflow</title>
      <link>https://danward79.github.io/post/hugoworkflow/</link>
      <pubDate>Tue, 14 Jul 2015 19:36:59 +1000</pubDate>
      
      <guid>https://danward79.github.io/post/hugoworkflow/</guid>
      <description>

&lt;p&gt;There are &lt;em&gt;lots&lt;/em&gt; of articles about using Hugo with Github. They are all fairly complex. I spent sometime experimenting with them. in the end I decided, I wanted to simplify.&lt;/p&gt;

&lt;h4 id=&#34;requirements:35dd500d9fc6389edf36965b29c56138&#34;&gt;Requirements&lt;/h4&gt;

&lt;p&gt;The requirements for me are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Deploy static site with no cost to me.&lt;/li&gt;
&lt;li&gt;I did not need to deploy source. Compiled static site is enough. (e.g. HTML)&lt;/li&gt;
&lt;li&gt;Simple, minimal steps from me.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;workflow:35dd500d9fc6389edf36965b29c56138&#34;&gt;Workflow&lt;/h4&gt;

&lt;p&gt;This setup will enable me to work in Atom editor on posts, which are saved in the source folder.&lt;/p&gt;

&lt;p&gt;On completion of a post. Running the deploy command, will compile the site and move the content to the repo, then commit and push the changes to github.&lt;/p&gt;

&lt;h4 id=&#34;setup:35dd500d9fc6389edf36965b29c56138&#34;&gt;Setup&lt;/h4&gt;

&lt;p&gt;Assuming you have hugo and git installed on your machine and setup.&lt;/p&gt;

&lt;p&gt;I ended up with the following directory structure. With a deployment bash script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ~/TechNotes
      danward79.github.io/
      source/
      deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The source folder stores the uncompiled hugo site. All edits to posts etc occur here.&lt;/li&gt;
&lt;li&gt;The repo (danward79.github.io) stores the compiled site and is synced using git commit and git push.&lt;/li&gt;
&lt;li&gt;deploy.sh is the script that compiles and deploys&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;deployment-script-deploy-sh:35dd500d9fc6389edf36965b29c56138&#34;&gt;Deployment Script - deploy.sh&lt;/h4&gt;

&lt;p&gt;The deploy script is shown below. It would need editting to suit your setup and situation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

srcPath=~/Documents/Development/Websites/TechNotes/source/
deployPath=~/Documents/Development/Websites/TechNotes/danward79.github.io/
branch=&#39;master&#39;

echo &#39;Deploy changes to Tech Notes&#39;
cd $srcPath

echo &#39;Building changes&#39;
hugo

echo &#39;Moving changes to repo&#39;
cp -R $srcPath/public/ $deployPath

echo &#39;Checkout changes&#39;
cd $deployPath
git checkout $branch
git add -A

echo &#39;Commit changes&#39;
git commit -m &#39;Publish Changes&#39;

echo &#39;Pushing changes&#39;
git push origin master

echo &#39;Returning to source path&#39;
cd $srcPath
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple. On completion simply run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash deploy.sh
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Watchdog on the PI</title>
      <link>https://danward79.github.io/post/pi_watchdog/</link>
      <pubDate>Mon, 13 Jul 2015 20:36:59 +1000</pubDate>
      
      <guid>https://danward79.github.io/post/pi_watchdog/</guid>
      <description>

&lt;p&gt;Sometimes, it&amp;rsquo;s handy to have someone on standby to reset a computer, when it freezes in explicably. There is a tool for this purpose. It&amp;rsquo;s called a &lt;a href=&#34;https://en.wikipedia.org/wiki/Watchdog_timer&#34;&gt;watchdog&lt;/a&gt;. On most of the PI&amp;rsquo;s I have had running I have setup a watchdog for this purpose.&lt;/p&gt;

&lt;p&gt;In short a watchdog, will cause either a hard or soft reset to occur, if it is not kicked by the system often enough. The kick is assumed to indicate an operating system.&lt;/p&gt;

&lt;h4 id=&#34;to-install-on-the-raspberry-pi:ee3c7ffdd9fa821c46a9edb3b07acd26&#34;&gt;To install on the Raspberry PI.&lt;/h4&gt;

&lt;p&gt;From the command line on a standard Rasbian install.&lt;/p&gt;

&lt;p&gt;First update Raspbian, note the &amp;lsquo;-y&amp;rsquo; flag which suppresses any prompts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get -y update
sudo apt-get -y upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Expose the watchdog to the operating system. This will create a device at /dev/watchdog&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo modprobe bcm2708_wdog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit module to load at boot. Add the following line.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bcm2708_wdog&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nano /etc/modules
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install the watchdog service, check it is on and start.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install watchdog chkconfig
sudo chkconfig watchdog on
sudo /etc/init.d/watchdog start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open the watchdog config file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nano /etc/watchdog.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the config uncomment lines with&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;watchdog-device&amp;rdquo; and&lt;/li&gt;
&lt;li&gt;&amp;ldquo;max-load-1 = 24&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;set the following lines to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;realtime = yes&lt;/li&gt;
&lt;li&gt;priority = 1&lt;/li&gt;
&lt;li&gt;interval = 14&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Restart the service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo /etc/init.d/watchdog restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;test-it:ee3c7ffdd9fa821c46a9edb3b07acd26&#34;&gt;Test it&lt;/h4&gt;

&lt;p&gt;To test, lets force the PI to crash. This is known as a Fork-Bomb! Disable swap and then.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo swapoff -a
:(){ :|:&amp;amp; };:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can stop it with: sudo /etc/init.d/watchdog stop OR sudo systemctl stop watchdog.service&lt;/p&gt;

&lt;p&gt;You can disable it permanently with: sudo update-rc.d -f watchdog remove OR sudo systemctl disable watchdog.service﻿&lt;/p&gt;

&lt;h6 id=&#34;references:ee3c7ffdd9fa821c46a9edb3b07acd26&#34;&gt;References&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://rpihouse.wordpress.com/2012/12/06/watching-the-dog/&#34;&gt;Watching the dog.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Mosquitto on the PI</title>
      <link>https://danward79.github.io/post/mosquitto/</link>
      <pubDate>Sun, 12 Jul 2015 20:36:59 +1000</pubDate>
      
      <guid>https://danward79.github.io/post/mosquitto/</guid>
      <description>

&lt;p&gt;MQTT is a publish/subscribe messaging system, &lt;a href=&#34;http://mosquitto.org/&#34;&gt;Mosquitto&lt;/a&gt; is on open source broker.&lt;/p&gt;

&lt;h3 id=&#34;install-main-package:c9eb20fb0f7b1c8c904be7dde2286ece&#34;&gt;Install main package&lt;/h3&gt;

&lt;p&gt;From the command line&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install mosquitto
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;install-command-line-tools:c9eb20fb0f7b1c8c904be7dde2286ece&#34;&gt;Install command Line tools&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install mosquitto-clients
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;install-c-dev-libraries:c9eb20fb0f7b1c8c904be7dde2286ece&#34;&gt;Install C Dev Libraries&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install libmosquitto0-dev libmosquittopp0-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;test-subscription:c9eb20fb0f7b1c8c904be7dde2286ece&#34;&gt;Test subscription&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mosquitto_sub -v -t ‘#’

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or alternatively&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mosquitto_sub -v -t ‘#’ | xxd
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>