<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Notes...</title>
    <link>https://danward79.co.uk/post/index.xml</link>
    <description>Recent content in Posts on Notes...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Jan 2017 20:58:55 +1100</lastBuildDate>
    <atom:link href="https://danward79.co.uk/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Deploy to github using ssl</title>
      <link>https://danward79.co.uk/post/deploy-to-github-using-ssl/</link>
      <pubDate>Sun, 22 Jan 2017 20:58:55 +1100</pubDate>
      
      <guid>https://danward79.co.uk/post/deploy-to-github-using-ssl/</guid>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Deploying a static site on Github is great, they&amp;rsquo;ll even serve it over https, if your using there &amp;lsquo;&lt;em&gt;username.github.io&lt;/em&gt;&amp;rsquo; domain. If you want to use a custom domain however, you will soon find out that https, is not longer available.&lt;/p&gt;

&lt;p&gt;Below, I&amp;rsquo;ll outline how I went about solving this problem using cloudflare. There are probably many ways to do this, so as ever do your research. This is just one of the solutions and I am not saying I did not miss anything!&lt;/p&gt;

&lt;h3 id=&#34;github-config&#34;&gt;Github config&lt;/h3&gt;

&lt;p&gt;There are a couple of things you need to do on the github side of things.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ensure your repo has a CNAME file, in the case of this site it contains:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://danward79.co.uk
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the settings for your repo, ensure that custom domain is set to your base address, in the case of this site, that is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;danward79.co.uk
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;hugo-config&#34;&gt;Hugo config&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In your site config file, you will need to set the baseurl to match the custom domain your using. So in the case of this site it will be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;https://danward79.co.uk/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;cloudflare-config&#34;&gt;Cloudflare config&lt;/h3&gt;

&lt;p&gt;There are a few steps here that are required.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make sure you have a &lt;a href=&#34;https://www.cloudflare.com&#34;&gt;cloudflare&lt;/a&gt; account setup.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In cloudflare, click the &amp;lsquo;+ Add Site&amp;rsquo;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the dialogue that appears enter your base domain and click begin scan:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;danward79.co.uk
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Cloudflare will start scanning your site. Once you see the button &amp;lsquo;Continue Setup&amp;rsquo; click it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next you will need to setup DNS records.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select &amp;lsquo;CNAME&amp;rsquo; from the lefthand dropdown.&lt;/li&gt;
&lt;li&gt;In &amp;lsquo;name&amp;rsquo; type your domain base url:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  danward79.co.uk
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;In &amp;lsquo;domain name&amp;rsquo; enter your github pages url:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  danward79.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The last dropdown should be &amp;lsquo;Automatic TTL&amp;rsquo;&lt;/li&gt;
&lt;li&gt;Click &amp;lsquo;add record&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next repeat for www&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select &amp;lsquo;CNAME&amp;rsquo; from the lefthand dropdown.&lt;/li&gt;
&lt;li&gt;In &amp;lsquo;name&amp;rsquo; type:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  www
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;In &amp;lsquo;domain name&amp;rsquo; enter your github pages url:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  danward79.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The last dropdown should be &amp;lsquo;Automatic TTL&amp;rsquo;&lt;/li&gt;
&lt;li&gt;Click &amp;lsquo;add record&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &amp;lsquo;continue&amp;rsquo; when your done.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select &amp;lsquo;Free&amp;rsquo; on the plan page and click &amp;lsquo;continue&amp;rsquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The next page will give you nameserver details. &lt;strong&gt;Note these&lt;/strong&gt;, then click continue&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In your admin page for the domain. Click &amp;lsquo;crypto&amp;rsquo;, then ensure &amp;lsquo;SSL&amp;rsquo; is set to &amp;lsquo;Full&amp;rsquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the admin page, click &amp;lsquo;page rules&amp;rsquo;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lsquo;Create Page Rule&amp;rsquo;&lt;/li&gt;
&lt;li&gt;Enter this in the URL:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  http://*danward79.co.uk/*
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;In &amp;lsquo;Pick a setting&amp;rsquo;, choose &amp;lsquo;Always use https&amp;rsquo;&lt;/li&gt;
&lt;li&gt;Then save and deploy&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;domain-registar&#34;&gt;Domain registar&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Head over to your domain registar and proceed to your registar&amp;rsquo;s control panel to change your nameserver records.&lt;/li&gt;
&lt;li&gt;Enter the nameserver details as you noted above in step 8.&lt;/li&gt;
&lt;li&gt;Ensure your registar has no other CNAME records etc.&lt;/li&gt;
&lt;li&gt;Save the details and exit.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;update-and-deploy&#34;&gt;Update and deploy&lt;/h3&gt;

&lt;p&gt;Next the final step is to make sure you update and deploy your site to Github with all the above.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; It will take some time (up to 24 hours) for all the settings to work, some automagic needs to happen in the interweb. Mine took about 3 hours.&lt;/p&gt;

&lt;p&gt;Hope that helps someone.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moving from Wordpress.com to Github</title>
      <link>https://danward79.co.uk/post/wordpress-to-github/</link>
      <pubDate>Sat, 14 Jan 2017 21:06:05 +1100</pubDate>
      
      <guid>https://danward79.co.uk/post/wordpress-to-github/</guid>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;We have a travel &lt;a href=&#34;https://africanuhambo.co.uk&#34;&gt;blog&lt;/a&gt;, which has some stories and accounts from our travels in Europe. Until we recently moved to Australia, it was updated on a semi-regular basis, however now it is mostly dormant. It was hosted on Wordpress.com. As it is mostly simple content, I have wanted to convert the site to a static site, so that I could have it hosted elsewhere for free. This move has been on the cards for a long time.&lt;/p&gt;

&lt;p&gt;Although Wordpress is free and pretty decent for almost all of us, I just liked the idea of having the site static and simple. Recent scares with Yahoo hacks, etc gave me the hee-bee jeebies (spelling?). Wordpress is pretty popular, I think they say 27% of the web is served by a Wordpress site. That does go a long way to show that many other think Wordpress is great too.&lt;/p&gt;

&lt;p&gt;The only disadvantage to Wordpress was paying for certain services. I paid only for the custom domain support, which is almost nothing a year, it was probably not worth changing just on this basis. I would imagine the resources required to serve the new static version of the blog are somewhat lower, so that is a tenuous environmental advantage to moving.&lt;/p&gt;

&lt;p&gt;I guess the main driver for moving was the technical challenge.&lt;/p&gt;

&lt;p&gt;Disadvantages of hosting a static site at Github are that it does not fully support https for custom domains. However there are ways around this and it does support https for &lt;em&gt;.github.io&lt;/em&gt; domains. There are ways round this, which i&amp;rsquo;ll explain later.&lt;/p&gt;

&lt;p&gt;This post is mainly about the process I used to change from a Wordpress.com hosted site to a Hugo site, served with https via a custom domain and hosted by Github. The later part, I&amp;rsquo;ll discuss in another post.&lt;/p&gt;

&lt;h3 id=&#34;the-basic-process&#34;&gt;The basic process&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Warning:&lt;/em&gt; The process is fairly arduous and there may be a simpler way. The basic process is as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Export your Wordpress site XML files&lt;/li&gt;
&lt;li&gt;Install Jekyll&lt;/li&gt;
&lt;li&gt;Import Wordpress site to Jekyll&lt;/li&gt;
&lt;li&gt;Install Hugo&lt;/li&gt;
&lt;li&gt;Import Jekyll site to Hugo&lt;/li&gt;
&lt;li&gt;Do a lot of formatting and checking&lt;/li&gt;
&lt;li&gt;Create Github repo&lt;/li&gt;
&lt;li&gt;Deploy to Github&lt;/li&gt;
&lt;li&gt;Setup custom domain, https, etc (subject of another post possibly)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;steps&#34;&gt;Steps&lt;/h3&gt;

&lt;h4 id=&#34;1-export-your-wordpress-site-xml-files&#34;&gt;1. Export your Wordpress site XML files&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Head over to Wordpress.com and navigate to Tools &amp;gt; Export. The Tools menu is under &amp;ldquo;WP Admin&amp;rdquo; in wordpress.com.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Under the free export option, start the export and select &amp;ldquo;All content&amp;rdquo; then start the download, by click &amp;ldquo;Download Export File&amp;rdquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also use this URL to get to the tool directly, just put in your username:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://USERNAME.wordpress.com/wp-admin/export.php
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;You&amp;rsquo;ll need the xml file in the download later, so make a note of where it is saved.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-install-jekyll-jekyll-importer&#34;&gt;2. Install Jekyll &amp;amp; Jekyll Importer&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Install Jekyll, by following the instructions on &lt;a href=&#34;https://jekyllrb.com/docs/installation/&#34;&gt;this&lt;/a&gt; page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have all the prerequisites installed, simply use the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install jekyll
gem install jekyll-import
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can check if Jekyll has been installed or is installed, using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jekyll --version
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-import-wordpress-site-to-jekyll&#34;&gt;3. Import Wordpress site to Jekyll&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Use the Jekyll import tool to import the Wordpress posts, this will read the export xml and grab all your content, images etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;ll be using the instructions on &lt;a href=&#34;http://import.jekyllrb.com/docs/wordpressdotcom/&#34;&gt;this&lt;/a&gt; page to guide us.&lt;/p&gt;

&lt;p&gt;I ran the command below from the location I had the export saved, you&amp;rsquo;ll need to rename &amp;ldquo;wordpress.xml&amp;rdquo; to your export name or alternatively rename you export to wordpress.xml.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -rubygems -e &#39;require &amp;quot;jekyll-import&amp;quot;;
    JekyllImport::Importers::WordpressDotCom.run({
      &amp;quot;source&amp;quot; =&amp;gt; &amp;quot;wordpress.xml&amp;quot;,
      &amp;quot;no_fetch_images&amp;quot; =&amp;gt; false,
      &amp;quot;assets_folder&amp;quot; =&amp;gt; &amp;quot;assets&amp;quot;
    })&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-install-hugo&#34;&gt;4. Install Hugo&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install Hugo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install Hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check it is installed with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo version
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are not using &lt;a href=&#34;http://brew.sh&#34;&gt;homebrew&lt;/a&gt;, follow the instructions on &lt;a href=&#34;https://gohugo.io&#34;&gt;this&lt;/a&gt; page to install Hugo.&lt;/p&gt;

&lt;h4 id=&#34;5-import-jekyll-site-to-hugo&#34;&gt;5. Import Jekyll site to Hugo&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Use the following command to import Jekyll to a Hugo site&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;hugo import jekyll JekyllSitePath HugoSitePath
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;6-do-a-lot-of-formatting-and-checking&#34;&gt;6. Do a lot of formatting and checking&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;After the script has success fully completed you&amp;rsquo;ll need to run the Hugo server from your Hugo site path
&lt;code&gt;
hugo serve
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You&amp;rsquo;ll probably navigate to localhost:1313 and be greeted with a blank page. That will be because you need a theme. In which case:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd themes
git clone https://github.com/vjeantet/hugo-theme-casper casper
cd ..
hugo server -t casper -D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will load your site with a folder watch. You&amp;rsquo;ll note a lot of formatting issues. You&amp;rsquo;ll need to work through each post and fix the issues 1 by 1!&lt;/p&gt;

&lt;h4 id=&#34;7-create-github-repo&#34;&gt;7. Create Github repo&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I don&amp;rsquo;t intend to go through this bit by bit, there is a guide &lt;a href=&#34;https://pages.github.com&#34;&gt;here&lt;/a&gt; to follow.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;8-deploy-to-github&#34;&gt;8. Deploy to Github&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I use the method described in &lt;a href=&#34;https://danward79.co.uk/post/hugoworkflow/&#34;&gt;here&lt;/a&gt; to build and deploy. There are several methods. Feel free to find your best option.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;9-setup-custom-domain-https-etc-subject-of-another-post&#34;&gt;9. Setup custom domain, https, etc (subject of another post)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Watch this space! I need to move this blog to be served by https/ssl so, I&amp;rsquo;ll show you the steps then.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Blast from the Past - Netremote Pocket PC Screen shots</title>
      <link>https://danward79.co.uk/post/netremote/</link>
      <pubDate>Mon, 24 Aug 2015 19:21:19 +1000</pubDate>
      
      <guid>https://danward79.co.uk/post/netremote/</guid>
      <description>

&lt;h2 id=&#34;the-past&#34;&gt;The Past&lt;/h2&gt;

&lt;p&gt;Below is a blast from the past, some work I did in 2002 using Netremote from &lt;a href=&#34;http://www.promixis.com&#34;&gt;Promixis&lt;/a&gt; to provide some degree of automation in my flat, the front end was supported with muscle provided by Girder, which had a lot of &lt;a href=&#34;http://www.lua.org&#34;&gt;LUA&lt;/a&gt; running behind it on my server in node zero.&lt;/p&gt;

&lt;h3 id=&#34;netremote-pocket-pc-screen-shots&#34;&gt;Netremote Pocket PC Screen shots&lt;/h3&gt;

&lt;p&gt;The basis of this ccf (skin) is JLee&amp;rsquo;s Opus Theme, I have just heavily modified all the pages. Really only the JRMC pages are similar.&lt;/p&gt;

&lt;p&gt;Below are a few screenshots, not all of them thou.  From NetRemote, I can do all the below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Play music in multiple zones, only using one at the moment due to recent house move.&lt;/li&gt;
&lt;li&gt;Play any DVD I own on from a central server.  At the touch of a &amp;ldquo;button&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Control my lighting.&lt;/li&gt;
&lt;li&gt;See a 5-day forecast, including current conditions and Radar.&lt;/li&gt;
&lt;li&gt;Get local wind conditions for Windsurfing thanks to PiertoPier.net&lt;/li&gt;
&lt;li&gt;Get Sea Conditions from a local Bouy, this gives me Sea Temperature, and Offshore Wave Height etc.&lt;/li&gt;
&lt;li&gt;See the days time times.&lt;/li&gt;
&lt;li&gt;Control SageTV, my PVR (Personal Video Recorder), and see it&amp;rsquo;s current status.  i.e. See what is recording and playing and available disk space.  (This is like Sky+ on steroids for those who don&amp;rsquo;t know)&lt;/li&gt;
&lt;li&gt;Control all my equipment.&lt;/li&gt;
&lt;li&gt;View local web cams, i.e. the beach!&lt;/li&gt;
&lt;li&gt;Thats all I can remember for this one&amp;hellip;.  I have two more thou that do more and other things&amp;hellip;.  More on that later.&lt;/li&gt;
&lt;/ul&gt;

&lt;table style=&#34;width: 100%; height: 100%; text-align: left; margin-left: auto; margin-right: auto;&#34; border=&#34;0&#34; cellpadding=&#34;2&#34; cellspacing=&#34;2&#34;&gt;
  &lt;tbody&gt;
  &lt;tr&gt;
    &lt;td style=&#34;text-align: center; vertical-align: middle;&#34;&gt;&lt;img style=&#34;width: 243px; height: 322px;&#34; alt=&#34;&#34; title=&#34;OPUS Skin Home Page&#34; src=&#34;https://danward79.co.uk/static/ppchome.jpg&#34; align=&#34;middle&#34;&gt;&lt;br&gt;Home Page&lt;/td&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;img style=&#34;width: 243px; height: 322px;&#34; alt=&#34;&#34; title=&#34;Weather Conditions&#34; src=&#34;https://danward79.co.uk/static/ppcweathercond.jpg&#34;&gt;&lt;br&gt;Current Conditions&lt;/td&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;img style=&#34;width: 243px; height: 320px;&#34; alt=&#34;&#34; title=&#34;Weather Radar&#34; src=&#34;https://danward79.co.uk/static/ppcweatherradar.jpg&#34;&gt;&lt;br&gt;Current Weather Radar&lt;/td&gt;
    &lt;/tr&gt;&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;img style=&#34;width: 243px; height: 320px;&#34; alt=&#34;&#34; title=&#34;Weather Forecast&#34; src=&#34;https://danward79.co.uk/static/ppcweatherforecast.jpg&#34;&gt;&lt;br&gt;Forecast&lt;/td&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;img style=&#34;width: 243px; height: 321px;&#34; alt=&#34;&#34; title=&#34;Offshore Sea Conditions and Local Tides&#34; src=&#34;https://danward79.co.uk/static/ppctidalseaconditions.jpg&#34;&gt;&lt;br&gt;Tidal and Sea Conditions&lt;/td&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;img style=&#34;width: 242px; height: 321px;&#34; alt=&#34;&#34; title=&#34;DVD Juke Box - Covers Page&#34; src=&#34;https://danward79.co.uk/static/ppcldjcovers.jpg&#34;&gt;&lt;br&gt;DVD Jukebox - Covers View&lt;/td&gt;
    &lt;/tr&gt;&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;img style=&#34;width: 242px; height: 322px;&#34; alt=&#34;&#34; title=&#34;DVD JukeBox - Titles Page&#34; src=&#34;https://danward79.co.uk/static/ppcljdtitles.jpg&#34;&gt;&lt;br&gt;DVD Jukebox - Titles View&lt;/td&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;img style=&#34;width: 243px; height: 321px;&#34; alt=&#34;&#34; title=&#34;Dvd JukeBox - Large Cover View&#34; src=&#34;https://danward79.co.uk/static/ppcldjlargecover.jpg&#34;&gt;&lt;br&gt;DVD Jukebox - Large Cover View&lt;/td&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;img style=&#34;width: 243px; height: 321px;&#34; alt=&#34;&#34; title=&#34;DVD Info&#34; src=&#34;https://danward79.co.uk/static/ppcldjinfo.jpg&#34;&gt;&lt;br&gt;DVD Jukebox - DVD Info&lt;/td&gt;
    &lt;/tr&gt;&lt;tr&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;img style=&#34;width: 243px; height: 321px;&#34; alt=&#34;&#34; title=&#34;DVD Control&#34; src=&#34;https://danward79.co.uk/static/ppcljddvdcontrol.jpg&#34;&gt;&lt;br&gt;DVD Control&lt;/td&gt;
    &lt;td style=&#34;text-align: center;&#34;&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Github &amp; Hugo workflow</title>
      <link>https://danward79.co.uk/post/hugoworkflow/</link>
      <pubDate>Tue, 14 Jul 2015 19:36:59 +1000</pubDate>
      
      <guid>https://danward79.co.uk/post/hugoworkflow/</guid>
      <description>

&lt;p&gt;There are &lt;em&gt;lots&lt;/em&gt; of articles about using Hugo with Github. They are all fairly complex. I spent sometime experimenting with them. In the end I decided, I wanted to simplify.&lt;/p&gt;

&lt;h4 id=&#34;requirements&#34;&gt;Requirements&lt;/h4&gt;

&lt;p&gt;The requirements for me are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Deploy static site with no cost to me.&lt;/li&gt;
&lt;li&gt;I did not need to deploy source. Compiled static site is enough. (e.g. HTML)&lt;/li&gt;
&lt;li&gt;Simple, minimal steps from me.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;workflow&#34;&gt;Workflow&lt;/h4&gt;

&lt;p&gt;This setup will enable me to work in Atom editor on posts, which are saved in the source folder.&lt;/p&gt;

&lt;p&gt;On completion of a post. Running the deploy command, will compile the site and move the content to the repo, then commit and push the changes to github.&lt;/p&gt;

&lt;h4 id=&#34;setup&#34;&gt;Setup&lt;/h4&gt;

&lt;p&gt;Assuming you have Hugo and git installed on your machine and setup.&lt;/p&gt;

&lt;p&gt;I ended up with the following directory structure. With a deployment bash script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ~/TechNotes
      danward79.github.io/
      source/
      deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The source folder stores the uncompiled hugo site. All edits to posts etc occur here.&lt;/li&gt;
&lt;li&gt;The repo (danward79.github.io) stores the compiled site and is synced using git commit and git push.&lt;/li&gt;
&lt;li&gt;deploy.sh is the script that compiles and deploys&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;deployment-script-deploy-sh&#34;&gt;Deployment Script - deploy.sh&lt;/h4&gt;

&lt;p&gt;The deploy script is shown below. It would need editting to suit your setup and situation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
baseURL=danward79.co.uk
srcPath=~/Documents/Development/Websites/TechNotes/source/
deployPath=~/Documents/Development/Websites/TechNotes/danward79.github.io/
branch=&#39;master&#39;

echo &#39;Deploy changes to Tech Notes&#39;
cd $srcPath

echo &#39;Building changes&#39;
hugo

echo &#39;Moving changes to repo&#39;
cd $deployPath/
#rm -rf *
cp -R $srcPath/public/ $deployPath
echo $baseURL &amp;gt; CNAME

echo &#39;Checkout changes&#39;
git checkout $branch
git add -A

echo &#39;Commit changes&#39;
git commit -m &#39;Publish Changes&#39;

echo &#39;Pushing changes&#39;
git push origin master

echo &#39;Returning to source path&#39;
cd $srcPath
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to make this script executable run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple. On completion simply run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./deploy.sh
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Watchdog on the PI</title>
      <link>https://danward79.co.uk/post/pi_watchdog/</link>
      <pubDate>Mon, 13 Jul 2015 20:36:59 +1000</pubDate>
      
      <guid>https://danward79.co.uk/post/pi_watchdog/</guid>
      <description>

&lt;p&gt;Sometimes, it&amp;rsquo;s handy to have someone on standby to reset a computer, when it freezes in explicably. There is a tool for this purpose. It&amp;rsquo;s called a &lt;a href=&#34;https://en.wikipedia.org/wiki/Watchdog_timer&#34;&gt;watchdog&lt;/a&gt;. On most of the PI&amp;rsquo;s I have had running I have setup a watchdog for this purpose.&lt;/p&gt;

&lt;p&gt;In short a watchdog, will cause either a hard or soft reset to occur, if it is not kicked by the system often enough. The kick is assumed to indicate an operating system.&lt;/p&gt;

&lt;h4 id=&#34;to-install-on-the-raspberry-pi&#34;&gt;To install on the Raspberry PI.&lt;/h4&gt;

&lt;p&gt;From the command line on a standard Rasbian install.&lt;/p&gt;

&lt;p&gt;First update Raspbian, note the &amp;lsquo;-y&amp;rsquo; flag which suppresses any prompts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get -y update
sudo apt-get -y upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Expose the watchdog to the operating system. This will create a device at /dev/watchdog&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo modprobe bcm2708_wdog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit module to load at boot. Add the following line.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bcm2708_wdog&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nano /etc/modules
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install the watchdog service, check it is on and start.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install watchdog chkconfig
sudo chkconfig watchdog on
sudo /etc/init.d/watchdog start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open the watchdog config file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nano /etc/watchdog.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the config uncomment lines with&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;watchdog-device&amp;rdquo; and&lt;/li&gt;
&lt;li&gt;&amp;ldquo;max-load-1 = 24&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;set the following lines to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;realtime = yes&lt;/li&gt;
&lt;li&gt;priority = 1&lt;/li&gt;
&lt;li&gt;interval = 14&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Restart the service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo /etc/init.d/watchdog restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;test-it&#34;&gt;Test it&lt;/h4&gt;

&lt;p&gt;To test, lets force the PI to crash. This is known as a Fork-Bomb! Disable swap and then.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo swapoff -a
:(){ :|:&amp;amp; };:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can stop it with: sudo /etc/init.d/watchdog stop OR sudo systemctl stop watchdog.service&lt;/p&gt;

&lt;p&gt;You can disable it permanently with: sudo update-rc.d -f watchdog remove OR sudo systemctl disable watchdog.service﻿&lt;/p&gt;

&lt;h6 id=&#34;references&#34;&gt;References&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://rpihouse.wordpress.com/2012/12/06/watching-the-dog/&#34;&gt;Watching the dog.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Mosquitto on the PI</title>
      <link>https://danward79.co.uk/post/mosquitto/</link>
      <pubDate>Sun, 12 Jul 2015 20:36:59 +1000</pubDate>
      
      <guid>https://danward79.co.uk/post/mosquitto/</guid>
      <description>

&lt;p&gt;MQTT is a publish/subscribe messaging system, &lt;a href=&#34;http://mosquitto.org/&#34;&gt;Mosquitto&lt;/a&gt; is on open source broker.&lt;/p&gt;

&lt;h3 id=&#34;install-main-package&#34;&gt;Install main package&lt;/h3&gt;

&lt;p&gt;From the command line&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install mosquitto
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;install-command-line-tools&#34;&gt;Install command Line tools&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install mosquitto-clients
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;install-c-dev-libraries&#34;&gt;Install C Dev Libraries&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install libmosquitto0-dev libmosquittopp0-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;test-subscription&#34;&gt;Test subscription&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mosquitto_sub -v -t ‘#’

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or alternatively&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mosquitto_sub -v -t ‘#’ | xxd
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>